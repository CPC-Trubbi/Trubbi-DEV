// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6t8zkvgddX7FsFBrxzeJqm
// Component: SSE4essENl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_trubbi_library.module.css"; // plasmic-import: 6t8zkvgddX7FsFBrxzeJqm/projectcss
import * as sty from "./PlasmicMainHeader.module.css"; // plasmic-import: SSE4essENl/css

import TrubbiMyndmerkiAndhverfasvgIcon from "./icons/PlasmicIcon__TrubbiMyndmerkiAndhverfasvg"; // plasmic-import: qjCCCln2A/icon
import IconFeatherMenusvgIcon from "./icons/PlasmicIcon__IconFeatherMenusvg"; // plasmic-import: L1WlQ4kt9t/icon

export type PlasmicMainHeader__VariantMembers = {
  negative: "negative";
};

export type PlasmicMainHeader__VariantsArgs = {
  negative?: SingleBooleanChoiceArg<"negative">;
};

type VariantPropType = keyof PlasmicMainHeader__VariantsArgs;
export const PlasmicMainHeader__VariantProps = new Array<VariantPropType>(
  "negative"
);

export type PlasmicMainHeader__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicMainHeader__ArgsType;
export const PlasmicMainHeader__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicMainHeader__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
};

export interface DefaultMainHeaderProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  negative?: SingleBooleanChoiceArg<"negative">;
  className?: string;
}

function PlasmicMainHeader__RenderFunc(props: {
  variants: PlasmicMainHeader__VariantsArgs;
  args: PlasmicMainHeader__ArgsType;
  overrides: PlasmicMainHeader__OverridesType;
  dataFetches?: PlasmicMainHeader__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        { [sty.root__negative]: hasVariant(variants, "negative", "negative") }
      )}
    >
      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__cy6Rc
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox___7Fbh
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicLink
                className={classNames(
                  defaultcss.a,
                  projectcss.a,
                  sty.link__aKol2
                )}
                component={Link}
                platform={"nextjs"}
              >
                <TrubbiMyndmerkiAndhverfasvgIcon
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.svg__iGnmK
                  )}
                  role={"img"}
                />
              </p.PlasmicLink>
            ),

            value: args.children
          })}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__aHbXi
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: null,
            value: args.slot
          })}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__mPn1X
          )}
        >
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(defaultcss.a, projectcss.a, sty.link)}
            component={Link}
            platform={"nextjs"}
          >
            <IconFeatherMenusvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(defaultcss.all, projectcss.all, sty.svg, {
                [sty.svg__negative]: hasVariant(
                  variants,
                  "negative",
                  "negative"
                )
              })}
              role={"img"}
            />
          </p.PlasmicLink>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "svg"],
  link: ["link", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainHeader__VariantsArgs;
    args?: PlasmicMainHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicMainHeader__Fetches;
  } & Omit<PlasmicMainHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMainHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMainHeader__ArgProps,
      internalVariantPropNames: PlasmicMainHeader__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicMainHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainHeader";
  } else {
    func.displayName = `PlasmicMainHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicMainHeader = Object.assign(
  // Top-level PlasmicMainHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicMainHeader
    internalVariantProps: PlasmicMainHeader__VariantProps,
    internalArgProps: PlasmicMainHeader__ArgProps
  }
);

export default PlasmicMainHeader;
/* prettier-ignore-end */
