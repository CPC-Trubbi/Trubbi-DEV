// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6t8zkvgddX7FsFBrxzeJqm
// Component: CU3dlJe3Dj
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_trubbi_library.module.css"; // plasmic-import: 6t8zkvgddX7FsFBrxzeJqm/projectcss
import * as sty from "./PlasmicRadioCard.module.css"; // plasmic-import: CU3dlJe3Dj/css

import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: 5V8ENcyLww6/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fTX0IlX86B/icon

export type PlasmicRadioCard__VariantMembers = {
  selected: "yes" | "no";
};

export type PlasmicRadioCard__VariantsArgs = {
  selected?: SingleChoiceArg<"yes" | "no">;
};

type VariantPropType = keyof PlasmicRadioCard__VariantsArgs;
export const PlasmicRadioCard__VariantProps = new Array<VariantPropType>(
  "selected"
);

export type PlasmicRadioCard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRadioCard__ArgsType;
export const PlasmicRadioCard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicRadioCard__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultRadioCardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  selected?: SingleChoiceArg<"yes" | "no">;
  className?: string;
}

function PlasmicRadioCard__RenderFunc(props: {
  variants: PlasmicRadioCard__VariantsArgs;
  args: PlasmicRadioCard__ArgsType;
  overrides: PlasmicRadioCard__OverridesType;
  dataFetches?: PlasmicRadioCard__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__selected_no]: hasVariant(variants, "selected", "no"),
          [sty.root__selected_yes]: hasVariant(variants, "selected", "yes")
        }
      )}
    >
      {(hasVariant(variants, "selected", "no") ? false : true) ? (
        <CheckIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, projectcss.all, sty.svg, {
            [sty.svg__selected_no]: hasVariant(variants, "selected", "no"),
            [sty.svg__selected_yes]: hasVariant(variants, "selected", "yes")
          })}
          role={"img"}
        />
      ) : null}
      {p.renderPlasmicSlot({
        defaultContents: (
          <IconIcon
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.svg___0WBw2
            )}
            role={"img"}
          />
        ),

        value: args.slot
      })}

      {p.renderPlasmicSlot({
        defaultContents: "Einstaklingur",
        value: args.children
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRadioCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRadioCard__VariantsArgs;
    args?: PlasmicRadioCard__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicRadioCard__Fetches;
  } & Omit<PlasmicRadioCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRadioCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRadioCard__ArgProps,
      internalVariantPropNames: PlasmicRadioCard__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicRadioCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadioCard";
  } else {
    func.displayName = `PlasmicRadioCard.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioCard = Object.assign(
  // Top-level PlasmicRadioCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicRadioCard
    internalVariantProps: PlasmicRadioCard__VariantProps,
    internalArgProps: PlasmicRadioCard__ArgProps
  }
);

export default PlasmicRadioCard;
/* prettier-ignore-end */
