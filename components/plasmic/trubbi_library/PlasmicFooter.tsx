// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6t8zkvgddX7FsFBrxzeJqm
// Component: 042Y1f-_kh
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SocialIcons from "../../SocialIcons"; // plasmic-import: ifuek07_pM/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: uBXExPHzRUYf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_trubbi_library.module.css"; // plasmic-import: 6t8zkvgddX7FsFBrxzeJqm/projectcss
import * as sty from "./PlasmicFooter.module.css"; // plasmic-import: 042Y1f-_kh/css

import IconAwesomeFacebookFsvgIcon from "./icons/PlasmicIcon__IconAwesomeFacebookFsvg"; // plasmic-import: qAdIjQfNiV/icon
import IconAwesomeInstagramsvgIcon from "./icons/PlasmicIcon__IconAwesomeInstagramsvg"; // plasmic-import: 5WL9UWXccu/icon
import IconAwesomeTwittersvgIcon from "./icons/PlasmicIcon__IconAwesomeTwittersvg"; // plasmic-import: byFY0Hzc7R/icon
import IconAwesomeLinkedinInsvgIcon from "./icons/PlasmicIcon__IconAwesomeLinkedinInsvg"; // plasmic-import: L-EHWHz59l/icon

export type PlasmicFooter__VariantMembers = {};

export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultFooterProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  dataFetches?: PlasmicFooter__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__zfqiG
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__nbxdh
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    defaultcss.a,
                    projectcss.a,
                    defaultcss.__wab_text,
                    sty.link__pTlcp
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Þjónustur"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    defaultcss.a,
                    projectcss.a,
                    defaultcss.__wab_text,
                    sty.link__s1Jev
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Um Okkur"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    defaultcss.a,
                    projectcss.a,
                    defaultcss.__wab_text,
                    sty.link__eKeue
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Gott að vita"}
                </p.PlasmicLink>
              </React.Fragment>
            ),
            value: args.slot
          })}
        </p.Stack>
      </div>

      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox___7ZLWt
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox___9SjE
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <SocialIcons
                className={classNames("__wab_instance", sty.socialIcons__zg2U)}
                negative={"negative" as const}
              />
            ),

            value: args.slot3
          })}
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__wBPjQ
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    defaultcss.a,
                    projectcss.a,
                    defaultcss.__wab_text,
                    sty.link__lEbAo
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Skilmálar"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    defaultcss.a,
                    projectcss.a,
                    defaultcss.__wab_text,
                    sty.link___7DCfm
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Persónuverndastefna"}
                </p.PlasmicLink>
              </React.Fragment>
            ),
            value: args.children
          })}
        </p.Stack>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__bBWan
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__atEvE
            )}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__z5R42
              )}
            >
              {p.renderPlasmicSlot({
                defaultContents: "2021 © Allur réttur áskilinn",
                value: args.slot2,
                className: classNames(sty.slotTargetSlot2)
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFooter__Fetches;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
