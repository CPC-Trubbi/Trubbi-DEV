// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6t8zkvgddX7FsFBrxzeJqm
// Component: ifuek07_pM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: uBXExPHzRUYf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_trubbi_library.module.css"; // plasmic-import: 6t8zkvgddX7FsFBrxzeJqm/projectcss
import * as sty from "./PlasmicSocialIcons.module.css"; // plasmic-import: ifuek07_pM/css

import IconAwesomeFacebookFsvgIcon from "./icons/PlasmicIcon__IconAwesomeFacebookFsvg"; // plasmic-import: qAdIjQfNiV/icon
import IconAwesomeInstagramsvgIcon from "./icons/PlasmicIcon__IconAwesomeInstagramsvg"; // plasmic-import: 5WL9UWXccu/icon
import IconAwesomeTwittersvgIcon from "./icons/PlasmicIcon__IconAwesomeTwittersvg"; // plasmic-import: byFY0Hzc7R/icon
import IconAwesomeLinkedinInsvgIcon from "./icons/PlasmicIcon__IconAwesomeLinkedinInsvg"; // plasmic-import: L-EHWHz59l/icon

export type PlasmicSocialIcons__VariantMembers = {
  negative: "negative";
};

export type PlasmicSocialIcons__VariantsArgs = {
  negative?: SingleBooleanChoiceArg<"negative">;
};

type VariantPropType = keyof PlasmicSocialIcons__VariantsArgs;
export const PlasmicSocialIcons__VariantProps = new Array<VariantPropType>(
  "negative"
);

export type PlasmicSocialIcons__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSocialIcons__ArgsType;
export const PlasmicSocialIcons__ArgProps = new Array<ArgPropType>("children");

export type PlasmicSocialIcons__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultSocialIconsProps {
  children?: React.ReactNode;
  negative?: SingleBooleanChoiceArg<"negative">;
  className?: string;
}

function PlasmicSocialIcons__RenderFunc(props: {
  variants: PlasmicSocialIcons__VariantsArgs;
  args: PlasmicSocialIcons__ArgsType;
  overrides: PlasmicSocialIcons__OverridesType;
  dataFetches?: PlasmicSocialIcons__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    (hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          projectcss.root_reset,
          sty.root
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <p.PlasmicLink
                className={classNames(
                  defaultcss.a,
                  projectcss.a,
                  sty.link__weper
                )}
                component={Link}
                platform={"nextjs"}
              >
                <IconAwesomeFacebookFsvgIcon
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.svg__xjs6M
                  )}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  defaultcss.a,
                  projectcss.a,
                  sty.link__xzZk7
                )}
                component={Link}
                platform={"nextjs"}
              >
                <IconAwesomeInstagramsvgIcon
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.svg__tWo9G
                  )}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  defaultcss.a,
                  projectcss.a,
                  sty.link___1Awxo
                )}
                component={Link}
                platform={"nextjs"}
              >
                <IconAwesomeTwittersvgIcon
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.svg___5PNpz
                  )}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  defaultcss.a,
                  projectcss.a,
                  sty.link__yCW1
                )}
                component={Link}
                platform={"nextjs"}
              >
                <IconAwesomeLinkedinInsvgIcon
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.svg__vZii
                  )}
                  role={"img"}
                />
              </p.PlasmicLink>
            </React.Fragment>
          ),
          value: args.children
        })}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialIcons__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialIcons__VariantsArgs;
    args?: PlasmicSocialIcons__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSocialIcons__Fetches;
  } & Omit<PlasmicSocialIcons__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSocialIcons__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSocialIcons__ArgProps,
      internalVariantPropNames: PlasmicSocialIcons__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSocialIcons__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialIcons";
  } else {
    func.displayName = `PlasmicSocialIcons.${nodeName}`;
  }
  return func;
}

export const PlasmicSocialIcons = Object.assign(
  // Top-level PlasmicSocialIcons renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSocialIcons
    internalVariantProps: PlasmicSocialIcons__VariantProps,
    internalArgProps: PlasmicSocialIcons__ArgProps
  }
);

export default PlasmicSocialIcons;
/* prettier-ignore-end */
